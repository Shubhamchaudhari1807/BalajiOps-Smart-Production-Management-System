//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Balaji_ERP_Solution.DataContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BalajiProductsManagementEntities : DbContext
    {
        public BalajiProductsManagementEntities()
            : base("name=BalajiProductsManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Costing> Costings { get; set; }
        public virtual DbSet<Godown> Godowns { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<Packing> Packings { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<Plant> Plants { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Tax> Taxes { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
        public virtual DbSet<PurchaseLine> PurchaseLines { get; set; }
        public virtual DbSet<PersonType> PersonTypes { get; set; }
        public virtual DbSet<GRNHeader> GRNHeaders { get; set; }
        public virtual DbSet<GRNLine> GRNLines { get; set; }
        public virtual DbSet<PurchaseHeader> PurchaseHeaders { get; set; }
        public virtual DbSet<FormulationLine> FormulationLines { get; set; }
        public virtual DbSet<ProductionLine> ProductionLines { get; set; }
        public virtual DbSet<ProductionHeader> ProductionHeaders { get; set; }
        public virtual DbSet<FormulationHeader> FormulationHeaders { get; set; }
        public virtual DbSet<userTable> userTables { get; set; }
    
        public virtual ObjectResult<SpCompany_Result> SpCompany()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpCompany_Result>("SpCompany");
        }
    
        public virtual ObjectResult<SpCosting_Result> SpCosting()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpCosting_Result>("SpCosting");
        }
    
        public virtual ObjectResult<SpGodown_Result> SpGodown()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGodown_Result>("SpGodown");
        }
    
        public virtual ObjectResult<SpItem_Result> SpItem()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpItem_Result>("SpItem");
        }
    
        public virtual ObjectResult<SpPacking_Result> SpPacking()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPacking_Result>("SpPacking");
        }
    
        public virtual ObjectResult<SpPerson_Result> SpPerson()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPerson_Result>("SpPerson");
        }
    
        public virtual ObjectResult<SpPlant_Result> SpPlant()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPlant_Result>("SpPlant");
        }
    
        public virtual ObjectResult<SpPurchaseHeader_Result> SpPurchaseHeader()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPurchaseHeader_Result>("SpPurchaseHeader");
        }
    
        public virtual ObjectResult<SpTax_Result> SpTax()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpTax_Result>("SpTax");
        }
    
        public virtual ObjectResult<SpUnit_Result> SpUnit()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpUnit_Result>("SpUnit");
        }
    
        public virtual ObjectResult<SpAllPurchase_Result> SpAllPurchase()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpAllPurchase_Result>("SpAllPurchase");
        }
    
        public virtual ObjectResult<SpDatewise_Result> SpDatewise(string fromdate, string toDate)
        {
            var fromdateParameter = fromdate != null ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpDatewise_Result>("SpDatewise", fromdateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SpItemWiseDateWise_Result> SpItemWiseDateWise(Nullable<int> itemId, string fromDate, string toDate)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpItemWiseDateWise_Result>("SpItemWiseDateWise", itemIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SpProductWiseDateWise_Result> SpProductWiseDateWise(Nullable<int> productId, string fromDate, string toDate)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpProductWiseDateWise_Result>("SpProductWiseDateWise", productIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SpSupplierWise_Result> SpSupplierWise(Nullable<int> supplierId)
        {
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpSupplierWise_Result>("SpSupplierWise", supplierIdParameter);
        }
    
        public virtual int test(Nullable<int> s)
        {
            var sParameter = s.HasValue ?
                new ObjectParameter("s", s) :
                new ObjectParameter("s", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("test", sParameter);
        }
    
        public virtual ObjectResult<SpGetHeaderInfo_Result> SpGetHeaderInfo(Nullable<int> pOId)
        {
            var pOIdParameter = pOId.HasValue ?
                new ObjectParameter("POId", pOId) :
                new ObjectParameter("POId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetHeaderInfo_Result>("SpGetHeaderInfo", pOIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SpFormulationMax()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SpFormulationMax");
        }
    
        public virtual ObjectResult<SpGRNLineData_Result> SpGRNLineData(Nullable<int> pOId)
        {
            var pOIdParameter = pOId.HasValue ?
                new ObjectParameter("POId", pOId) :
                new ObjectParameter("POId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGRNLineData_Result>("SpGRNLineData", pOIdParameter);
        }
    
        public virtual ObjectResult<SpSupplierwiseDatewise_Result> SpSupplierwiseDatewise(Nullable<int> supplierId, string fromDate, string toDate)
        {
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpSupplierwiseDatewise_Result>("SpSupplierwiseDatewise", supplierIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SpProduct_Result> SpProduct()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpProduct_Result>("SpProduct");
        }
    
        public virtual ObjectResult<SpGetFormulationHeaderInfo_Result> SpGetFormulationHeaderInfo(Nullable<int> formulationId)
        {
            var formulationIdParameter = formulationId.HasValue ?
                new ObjectParameter("FormulationId", formulationId) :
                new ObjectParameter("FormulationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetFormulationHeaderInfo_Result>("SpGetFormulationHeaderInfo", formulationIdParameter);
        }
    
        public virtual ObjectResult<SpCalculateStock_Result> SpCalculateStock()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpCalculateStock_Result>("SpCalculateStock");
        }
    
        public virtual ObjectResult<SpProductionLineData_Result> SpProductionLineData(Nullable<int> formulationId)
        {
            var formulationIdParameter = formulationId.HasValue ?
                new ObjectParameter("FormulationId", formulationId) :
                new ObjectParameter("FormulationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpProductionLineData_Result>("SpProductionLineData", formulationIdParameter);
        }
    }
}
